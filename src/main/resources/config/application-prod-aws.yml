# ===================================================================
# Spring Boot configuration for the "prod-aws" profile.
#
# This configuration is optimized for AWS deployment with:
# - RDS PostgreSQL with connection pooling
# - ElastiCache Redis for session management
# - CloudWatch logging and monitoring
# - Multi-tenant architecture support
# ===================================================================

# ===================================================================
# Standard Spring Boot properties optimized for AWS
# ===================================================================

logging:
  level:
    ROOT: INFO
    tech.jhipster: INFO
    com.nextjstemplate: INFO
    org.springframework.web: WARN
    org.hibernate.SQL: WARN
    org.hibernate.type.descriptor.sql.BasicBinder: WARN
  pattern:
    console: "%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n"
    file: "%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n"
  file:
    name: /var/log/spring-boot-app/application.log
    max-size: 100MB
    max-history: 30

management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics,prometheus
  endpoint:
    health:
      show-details: when-authorized
      probes:
        enabled: true
  health:
    db:
      enabled: true
    redis:
      enabled: true
    diskspace:
      enabled: true
  prometheus:
    metrics:
      export:
        enabled: true

spring:
  devtools:
    restart:
      enabled: false
    livereload:
      enabled: false

  # Database Configuration - RDS PostgreSQL
  datasource:
    type: com.zaxxer.hikari.HikariDataSource
    url: jdbc:postgresql://${RDS_ENDPOINT:localhost}:5432/${DB_NAME:event_site_manager_db}
    username: ${DB_USERNAME:postgres}
    password: ${DB_PASSWORD:password}
    hikari:
      poolName: HikariCP-AWS
      auto-commit: false
      # Optimized for multi-instance deployment
      maximum-pool-size: ${DB_MAX_POOL_SIZE:10}
      minimum-idle: ${DB_MIN_IDLE:2}
      # Connection timeout settings
      connection-timeout: 30000
      idle-timeout: 600000
      max-lifetime: 1800000
      leak-detection-threshold: 60000
      validation-timeout: 5000
      connection-test-query: SELECT 1
      # AWS RDS optimizations
      data-source-properties:
        socketTimeout: 30
        loginTimeout: 10
        connectTimeout: 10
        # Connection pooling for multi-tenant
        cachePrepStmts: true
        prepStmtCacheSize: 250
        prepStmtCacheSqlLimit: 2048
        useServerPrepStmts: true
        rewriteBatchedStatements: true
        cacheResultSetMetadata: true
        cacheServerConfiguration: true
        elideSetAutoCommits: true
        maintainTimeStats: false

  # JPA/Hibernate Configuration
  jpa:
    database-platform: org.hibernate.dialect.PostgreSQLDialect
    database: POSTGRESQL
    show-sql: false
    properties:
      hibernate:
        jdbc:
          time_zone: UTC
        order_inserts: true
        order_updates: true
        batch_versioned_data: true
        # Multi-tenant optimizations
        connection:
          provider_disables_autocommit: true
        cache:
          use_second_level_cache: true
          use_query_cache: true
          region:
            factory_class: org.hibernate.cache.jcache.JCacheRegionFactory
        format_sql: false
        # AWS RDS optimizations
        connection:
          provider_disables_autocommit: true
        jdbc:
          batch_size: 25
          batch_versioned_data: true
        order_inserts: true
        order_updates: true
        generate_statistics: false
    hibernate:
      ddl-auto: validate
      naming:
        physical-strategy: org.hibernate.boot.model.naming.CamelCaseToUnderscoresNamingStrategy
    open-in-view: false

  # Redis Configuration - ElastiCache
  data:
    redis:
      host: ${REDIS_ENDPOINT:localhost}
      port: ${REDIS_PORT:6379}
      password: ${REDIS_PASSWORD:}
      timeout: 2000ms
      ssl: false
      lettuce:
        pool:
          max-active: ${REDIS_MAX_ACTIVE:8}
          max-idle: ${REDIS_MAX_IDLE:8}
          min-idle: ${REDIS_MIN_IDLE:0}
          max-wait: 2000ms
        shutdown-timeout: 100ms

  # Cache Configuration
  cache:
    type: redis
    redis:
      time-to-live: 600000 # 10 minutes
      cache-null-values: false
      enable-statistics: true
      key-prefix: "event-site-manager:"
      use-key-prefix: true

  # Session Management
  session:
    store-type: redis
    redis:
      namespace: "event-site-manager:session"
      flush-mode: on_save
      save-mode: on_set_attribute

  # Liquibase Configuration
  liquibase:
    enabled: ${LIQUIBASE_ENABLED:true}
    change-log: classpath:config/liquibase/master.xml
    contexts: ${LIQUIBASE_CONTEXTS:prod}
    drop-first: false
    rollback-file: ${java.io.tmpdir}/liquibase-rollback.sql

  # Mail Configuration (SES)
  mail:
    host: ${MAIL_HOST:email-smtp.us-east-1.amazonaws.com}
    port: ${MAIL_PORT:587}
    username: ${MAIL_USERNAME:}
    password: ${MAIL_PASSWORD:}
    protocol: smtp
    tls: true
    properties:
      mail:
        smtp:
          auth: true
          starttls:
            enable: true
            required: true
          ssl:
            trust: email-smtp.us-east-1.amazonaws.com

  # File Storage Configuration (S3)
  servlet:
    multipart:
      max-file-size: ${MAX_FILE_SIZE:10MB}
      max-request-size: ${MAX_REQUEST_SIZE:100MB}
      enabled: true

# Server Configuration
server:
  port: ${SERVER_PORT:8080}
  servlet:
    context-path: ${SERVER_CONTEXT_PATH:/}
    session:
      timeout: ${SESSION_TIMEOUT:30m}
      cookie:
        name: EVENT_SITE_MANAGER_SESSION
        http-only: true
        secure: ${SESSION_SECURE:false}
        same-site: strict
  compression:
    enabled: true
    mime-types: text/html,text/xml,text/plain,text/css,text/javascript,application/javascript,application/json
    min-response-size: 1024
  error:
    include-stacktrace: never
    include-message: always
    include-binding-errors: always

# JHipster specific configuration
jhipster:
  security:
    authentication:
      jwt:
        secret: ${JHIPSTER_SECURITY_AUTHENTICATION_JWT_SECRET:}
        base64-secret: ${JHIPSTER_SECURITY_AUTHENTICATION_JWT_BASE64_SECRET:}
        token-validity-in-seconds: ${JHIPSTER_SECURITY_AUTHENTICATION_JWT_TOKEN_VALIDITY_IN_SECONDS:86400}
        token-validity-in-seconds-for-remember-me: ${JHIPSTER_SECURITY_AUTHENTICATION_JWT_TOKEN_VALIDITY_IN_SECONDS_FOR_REMEMBER_ME:2592000}
  cache:
    hazelcast:
      time-to-live-seconds: 3600
      backup-count: 1
      eviction:
        max-size-policy: PER_NODE
        size: 100
  mail:
    from: ${JHIPSTER_MAIL_FROM:event-site-manager@yourdomain.com}
    base-url: ${JHIPSTER_MAIL_BASE_URL:https://yourdomain.com}

# Multi-tenant Configuration
tenant:
  isolation:
    strategy: DATABASE_PER_TENANT # or SCHEMA_PER_TENANT, ROW_LEVEL
    default-tenant: ${DEFAULT_TENANT:default}
  security:
    enable-tenant-validation: ${TENANT_VALIDATION_ENABLED:true}
    allowed-domains: ${ALLOWED_DOMAINS:localhost,127.0.0.1}

# AWS Specific Configuration
aws:
  region: ${AWS_REGION:us-east-1}
  s3:
    bucket: ${S3_BUCKET_NAME:event-site-manager-storage}
    region: ${S3_REGION:us-east-1}
  cloudwatch:
    namespace: ${CLOUDWATCH_NAMESPACE:EventSiteManager/Application}
    enabled: ${CLOUDWATCH_ENABLED:true}

# Performance Monitoring
management:
  metrics:
    export:
      cloudwatch:
        enabled: ${CLOUDWATCH_METRICS_ENABLED:true}
        namespace: ${CLOUDWATCH_METRICS_NAMESPACE:EventSiteManager/Application}
        batch-size: 20
    distribution:
      percentiles-histogram:
        http.server.requests: true
      percentiles:
        http.server.requests: 0.5, 0.95, 0.99
      slo:
        http.server.requests: 50ms, 100ms, 200ms, 500ms

# Application specific configuration
application:
  cors:
    allowed-origins: ${CORS_ALLOWED_ORIGINS:http://localhost:3000,https://yourdomain.com}
    allowed-methods: GET,POST,PUT,DELETE,OPTIONS
    allowed-headers: "*"
    allow-credentials: true
    max-age: 3600
  security:
    rate-limiting:
      enabled: ${RATE_LIMITING_ENABLED:true}
      requests-per-minute: ${RATE_LIMIT_REQUESTS_PER_MINUTE:100}
  monitoring:
    enable-tenant-metrics: ${TENANT_METRICS_ENABLED:true}
    enable-performance-tracking: ${PERFORMANCE_TRACKING_ENABLED:true}

# Environment specific overrides
---
spring:
  config:
    activate:
      on-profile: prod-aws-monitoring
  jpa:
    properties:
      hibernate:
        generate_statistics: true
        session:
          events:
            log:
              LOG_QUERIES_SLOWER_THAN_MS: 100
