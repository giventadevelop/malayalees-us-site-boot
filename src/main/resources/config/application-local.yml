# ===================================================================
# Spring Boot configuration for the "local" profile.
#
# This configuration is optimized for local development and testing with:
# - Docker Compose PostgreSQL and Redis
# - Enhanced logging for debugging
# - Relaxed security for development
# - Multi-tenant testing support
# ===================================================================

logging:
  level:
    ROOT: INFO
    tech.jhipster: INFO
    com.nextjstemplate: DEBUG
    org.springframework.web: DEBUG
    org.springframework.security: DEBUG
    org.hibernate.SQL: DEBUG
    org.hibernate.type.descriptor.sql.BasicBinder: TRACE
    org.hibernate.orm.jdbc.bind: TRACE
  pattern:
    console: "%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n"
    file: "%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n"
  file:
    name: /var/log/spring-boot-app/application-local.log
    max-size: 100MB
    max-history: 7

management:
  endpoints:
    web:
      exposure:
        include: "*"  # Expose all endpoints for local testing
  endpoint:
    health:
      show-details: always
      show-components: always
      probes:
        enabled: true
  health:
    db:
      enabled: true
    redis:
      enabled: true
    diskspace:
      enabled: true
  info:
    env:
      enabled: true

spring:
  devtools:
    restart:
      enabled: true
    livereload:
      enabled: true

  # Database Configuration - Local PostgreSQL
  datasource:
    type: com.zaxxer.hikari.HikariDataSource
    url: jdbc:postgresql://${RDS_ENDPOINT:localhost}:5432/${DB_NAME:event_site_manager_db}
    username: ${DB_USERNAME:postgres}
    password: ${DB_PASSWORD:password}
    hikari:
      poolName: HikariCP-Local
      auto-commit: false
      # Optimized for local development
      maximum-pool-size: ${DB_MAX_POOL_SIZE:5}
      minimum-idle: ${DB_MIN_IDLE:1}
      connection-timeout: 30000
      idle-timeout: 600000
      max-lifetime: 1800000
      leak-detection-threshold: 60000
      validation-timeout: 5000
      connection-test-query: SELECT 1
      # Local development optimizations
      data-source-properties:
        socketTimeout: 30
        loginTimeout: 10
        connectTimeout: 10

  # JPA/Hibernate Configuration
  jpa:
    database-platform: org.hibernate.dialect.PostgreSQLDialect
    database: POSTGRESQL
    show-sql: true
    properties:
      hibernate:
        jdbc:
          time_zone: UTC
        format_sql: true
        use_sql_comments: true
        # Local development settings
        connection:
          provider_disables_autocommit: true
        jdbc:
          batch_size: 25
        order_inserts: true
        order_updates: true
        generate_statistics: true
        session:
          events:
            log:
              LOG_QUERIES_SLOWER_THAN_MS: 100
    hibernate:
      ddl-auto: update  # Allow schema updates in local
      naming:
        physical-strategy: org.hibernate.boot.model.naming.CamelCaseToUnderscoresNamingStrategy
    open-in-view: false

  # Redis Configuration - Local Redis
  data:
    redis:
      host: ${REDIS_ENDPOINT:localhost}
      port: ${REDIS_PORT:6379}
      password: ${REDIS_PASSWORD:}
      timeout: 2000ms
      ssl: false
      lettuce:
        pool:
          max-active: ${REDIS_MAX_ACTIVE:5}
          max-idle: ${REDIS_MAX_IDLE:5}
          min-idle: ${REDIS_MIN_IDLE:0}
          max-wait: 2000ms
        shutdown-timeout: 100ms

  # Cache Configuration
  cache:
    type: redis
    redis:
      time-to-live: 600000 # 10 minutes
      cache-null-values: false
      enable-statistics: true
      key-prefix: "event-site-manager:local:"
      use-key-prefix: true

  # Session Management
  session:
    store-type: redis
    redis:
      namespace: "event-site-manager:local:session"
      flush-mode: on_save
      save-mode: on_set_attribute

  # Liquibase Configuration
  liquibase:
    enabled: ${LIQUIBASE_ENABLED:true}
    change-log: classpath:config/liquibase/master.xml
    contexts: ${LIQUIBASE_CONTEXTS:local}
    drop-first: false
    rollback-file: ${java.io.tmpdir}/liquibase-rollback.sql

  # Mail Configuration (MailHog for local testing)
  mail:
    host: ${MAIL_HOST:localhost}
    port: ${MAIL_PORT:1025}
    username: ${MAIL_USERNAME:}
    password: ${MAIL_PASSWORD:}
    protocol: smtp
    tls: false
    properties:
      mail:
        smtp:
          auth: false
          starttls:
            enable: false
            required: false

  # File Storage Configuration (Local filesystem)
  servlet:
    multipart:
      max-file-size: ${MAX_FILE_SIZE:10MB}
      max-request-size: ${MAX_REQUEST_SIZE:100MB}
      enabled: true
      location: ${java.io.tmpdir}

# Server Configuration
server:
  port: ${SERVER_PORT:8080}
  servlet:
    context-path: ${SERVER_CONTEXT_PATH:/}
    session:
      timeout: ${SESSION_TIMEOUT:30m}
      cookie:
        name: EVENT_SITE_MANAGER_SESSION_LOCAL
        http-only: false  # Allow JavaScript access for development
        secure: false
        same-site: lax
  compression:
    enabled: true
    mime-types: text/html,text/xml,text/plain,text/css,text/javascript,application/javascript,application/json
    min-response-size: 1024
  error:
    include-stacktrace: always  # Show stack traces in local
    include-message: always
    include-binding-errors: always

# JHipster specific configuration
jhipster:
  security:
    authentication:
      jwt:
        secret: ${JHIPSTER_SECURITY_AUTHENTICATION_JWT_SECRET:my-secret-token-which-should-be-at-least-256-bits-long}
        base64-secret: ${JHIPSTER_SECURITY_AUTHENTICATION_JWT_BASE64_SECRET:}
        token-validity-in-seconds: ${JHIPSTER_SECURITY_AUTHENTICATION_JWT_TOKEN_VALIDITY_IN_SECONDS:86400}
        token-validity-in-seconds-for-remember-me: ${JHIPSTER_SECURITY_AUTHENTICATION_JWT_TOKEN_VALIDITY_IN_SECONDS_FOR_REMEMBER_ME:2592000}
  cache:
    hazelcast:
      time-to-live-seconds: 3600
      backup-count: 1
      eviction:
        max-size-policy: PER_NODE
        size: 100
  mail:
    from: ${JHIPSTER_MAIL_FROM:event-site-manager@local.com}
    base-url: ${JHIPSTER_MAIL_BASE_URL:http://localhost:8080}

# Multi-tenant Configuration for Local Testing
tenant:
  isolation:
    strategy: DATABASE_PER_TENANT # or SCHEMA_PER_TENANT, ROW_LEVEL
    default-tenant: ${DEFAULT_TENANT:tenant_demo_001}
  security:
    enable-tenant-validation: ${TENANT_VALIDATION_ENABLED:false}  # Disabled for local testing
    allowed-domains: ${ALLOWED_DOMAINS:localhost,127.0.0.1,demo1.local,demo2.local,demo3.local}
    test-tenants:
      - tenant_id: "tenant_demo_001"
        domain: "demo1.local"
        name: "Demo Organization 1"
      - tenant_id: "tenant_demo_002"
        domain: "demo2.local"
        name: "Demo Organization 2"
      - tenant_id: "tenant_demo_003"
        domain: "demo3.local"
        name: "Demo Organization 3"

# Local Development Configuration
application:
  cors:
    allowed-origins: ${CORS_ALLOWED_ORIGINS:http://localhost:3000,http://localhost:4200,http://localhost:8080}
    allowed-methods: GET,POST,PUT,DELETE,OPTIONS,HEAD,PATCH
    allowed-headers: "*"
    allow-credentials: true
    max-age: 3600
  security:
    rate-limiting:
      enabled: ${RATE_LIMITING_ENABLED:false}  # Disabled for local testing
      requests-per-minute: ${RATE_LIMIT_REQUESTS_PER_MINUTE:1000}
  monitoring:
    enable-tenant-metrics: ${TENANT_METRICS_ENABLED:true}
    enable-performance-tracking: ${PERFORMANCE_TRACKING_ENABLED:true}
    enable-debug-logging: ${DEBUG_LOGGING_ENABLED:true}

# Local Testing Configuration
testing:
  enabled: true
  test-data:
    auto-create: ${AUTO_CREATE_TEST_DATA:true}
    sample-users: ${SAMPLE_USERS_COUNT:10}
    sample-events: ${SAMPLE_EVENTS_COUNT:5}
    sample-polls: ${SAMPLE_POLLS_COUNT:3}
  mock-services:
    email: ${MOCK_EMAIL_SERVICE:true}
    sms: ${MOCK_SMS_SERVICE:true}
    payment: ${MOCK_PAYMENT_SERVICE:true}

# JWT API Authentication Credentials (Externalized for Security)
jwt-api-auth:
  username: ${JWT_API_AUTH_USERNAME:jwtlocal}
  password: ${JWT_API_AUTH_PASSWORD:jwt#local123}

# Development Tools Configuration
development:
  h2-console:
    enabled: ${H2_CONSOLE_ENABLED:false}  # Using PostgreSQL
  actuator:
    enabled: true
  swagger:
    enabled: true
    path: /swagger-ui.html
  debug:
    sql-queries: true
    performance-metrics: true
    tenant-isolation: true
